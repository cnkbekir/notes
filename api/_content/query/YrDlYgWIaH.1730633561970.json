{"_path":"/nuxt-capacitor-newrelic","_dir":"","_draft":false,"_partial":false,"_locale":"","title":"Nuxt - Capacitor - New Relic","description":"","id":"2","date":"2023-11-16","categories":["web"],"tags":["nuxt","capacitor","newrelic"],"cover":"","readingTime":{"text":"3 min read","minutes":2.02,"time":121200,"words":404},"body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt ve Capacitor ile geliştirdiğim mobil uygulamamı takip etmek için New Relic'i nasıl kurduğumu anlatıcam.\nÖncelikle New Relic ekibinin sunduğu paketi yüklüyoruz:"}]},{"type":"element","tag":"pre","props":{"code":"npm i @newrelic/newrelic-capacitor-plugin && npx cap sync\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"npm i @newrelic/newrelic-capacitor-plugin && npx cap sync\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"New Relic hesabımızda Add Data butonuyla kurulum ekranını açarak listeden Capacitor'ü seçiyoruz. Buradaki bilgilerin çoğunu o ekranda da bulabilirsiniz. Alacağımız token'ı aşağıdaki kodda da kullanıcaz."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Vue.js projelerinde App.vue dosyasında yapılan paket ayarlarını Nuxt projelerinde plugins klasöründe yapabiliyoruz. Buraya eklediğimiz dosyalar otomatik çalışıyor. Bilgi için: "},{"type":"element","tag":"a","props":{"href":"https://nuxt.com/docs/guide/directory-structure/plugins","rel":["nofollow"]},"children":[{"type":"text","value":"plugins/ · Nuxt Directory Structure"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Projede plugins klasörü altında newrelic.ts dosyasını oluşturuyoruz:"}]},{"type":"element","tag":"pre","props":{"code":"import { NewRelicCapacitorPlugin, NREnums, AgentConfiguration } from '@newrelic/newrelic-capacitor-plugin';\nimport { Capacitor } from '@capacitor/core';\n\nexport default defineNuxtPlugin(() => {\n  var appToken;\n  if (Capacitor.getPlatform() === 'ios') {\n    appToken = '...';\n  } else {\n    appToken = '...';\n  }\n\n  let agentConfig : AgentConfiguration = {\n    //Android Specific\n    // Optional:Enable or disable collection of event data.\n    analyticsEventEnabled: true,\n\n    // Optional:Enable or disable crash reporting.\n    crashReportingEnabled: true,\n\n    // Optional:Enable or disable interaction tracing. Trace instrumentation still occurs, but no traces are harvested. This will disable default and custom interactions.\n    interactionTracingEnabled: true,\n\n    // Optional:Enable or disable reporting successful HTTP requests to the MobileRequest event type.\n    networkRequestEnabled: true,\n\n    // Optional:Enable or disable reporting network and HTTP request errors to the MobileRequestError event type.\n    networkErrorRequestEnabled: true,\n\n    // Optional:Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events.\n    httpResponseBodyCaptureEnabled: true,\n\n    // Optional:Enable or disable agent logging.\n    loggingEnabled: true,\n\n    // Optional:Specifies the log level. Omit this field for the default log level.\n    // Options include: ERROR (least verbose), WARNING, INFO, VERBOSE, AUDIT (most verbose).\n    logLevel: NREnums.LogLevel.ERROR,\n\n    // iOS Specific\n    // Optional:Enable/Disable automatic instrumentation of WebViews\n    webViewInstrumentation: true,\n\n    // Optional:Set a specific collector address for sending data. Omit this field for default address.\n    // collectorAddress: \"\",\n\n    // Optional:Set a specific crash collector address for sending crashes. Omit this field for default address.\n    // crashCollectorAddress: \"\",\n\n    // Optional:Enable or disable sending JS console logs to New Relic.\n    sendConsoleEvents: true,\n\n    // Optional: nable or disable reporting data using different endpoints for US government clients.\n     fedRampEnabled: false\n  }\n\n  NewRelicCapacitorPlugin.start({appKey:appToken, agentConfiguration:agentConfig})\n})\n\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { NewRelicCapacitorPlugin, NREnums, AgentConfiguration } from '@newrelic/newrelic-capacitor-plugin';\nimport { Capacitor } from '@capacitor/core';\n\nexport default defineNuxtPlugin(() => {\n  var appToken;\n  if (Capacitor.getPlatform() === 'ios') {\n    appToken = '...';\n  } else {\n    appToken = '...';\n  }\n\n  let agentConfig : AgentConfiguration = {\n    //Android Specific\n    // Optional:Enable or disable collection of event data.\n    analyticsEventEnabled: true,\n\n    // Optional:Enable or disable crash reporting.\n    crashReportingEnabled: true,\n\n    // Optional:Enable or disable interaction tracing. Trace instrumentation still occurs, but no traces are harvested. This will disable default and custom interactions.\n    interactionTracingEnabled: true,\n\n    // Optional:Enable or disable reporting successful HTTP requests to the MobileRequest event type.\n    networkRequestEnabled: true,\n\n    // Optional:Enable or disable reporting network and HTTP request errors to the MobileRequestError event type.\n    networkErrorRequestEnabled: true,\n\n    // Optional:Enable or disable capture of HTTP response bodies for HTTP error traces, and MobileRequestError events.\n    httpResponseBodyCaptureEnabled: true,\n\n    // Optional:Enable or disable agent logging.\n    loggingEnabled: true,\n\n    // Optional:Specifies the log level. Omit this field for the default log level.\n    // Options include: ERROR (least verbose), WARNING, INFO, VERBOSE, AUDIT (most verbose).\n    logLevel: NREnums.LogLevel.ERROR,\n\n    // iOS Specific\n    // Optional:Enable/Disable automatic instrumentation of WebViews\n    webViewInstrumentation: true,\n\n    // Optional:Set a specific collector address for sending data. Omit this field for default address.\n    // collectorAddress: \"\",\n\n    // Optional:Set a specific crash collector address for sending crashes. Omit this field for default address.\n    // crashCollectorAddress: \"\",\n\n    // Optional:Enable or disable sending JS console logs to New Relic.\n    sendConsoleEvents: true,\n\n    // Optional: nable or disable reporting data using different endpoints for US government clients.\n     fedRampEnabled: false\n  }\n\n  NewRelicCapacitorPlugin.start({appKey:appToken, agentConfiguration:agentConfig})\n})\n\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Burada fedRampEnabled ayarı ile ilgili bir sorun varmış. Bundan dolayı çok test yapmak zorunda kaldım. GitHub'da bir issue oluşturdum ve sorun kısa sürede çözüldü: "},{"type":"element","tag":"a","props":{"href":"https://github.com/newrelic/newrelic-capacitor-plugin/issues/59","rel":["nofollow"]},"children":[{"type":"text","value":"Can't get android logs - Nuxt3 - Ionic · Issue #59 · newrelic/newrelic-capacitor-plugin (github.com)"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Android için build.gradle dosyamızı düzenliyoruz:"}]},{"type":"element","tag":"pre","props":{"code":"buildscript {\n    ...\n    repositories {\n      ...\n      mavenCentral()\n    }\n    dependencies {\n      ...\n      classpath \"com.newrelic.agent.android:agent-gradle-plugin:7.1.0\"\n    }\n  }\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"buildscript {\n    ...\n    repositories {\n      ...\n      mavenCentral()\n    }\n    dependencies {\n      ...\n      classpath \"com.newrelic.agent.android:agent-gradle-plugin:7.1.0\"\n    }\n  }\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Ve app/build.gradle dosyamızı düzenliyoruz:"}]},{"type":"element","tag":"pre","props":{"code":"apply plugin: \"com.android.application\"\napply plugin: 'newrelic' // <-- bu satırı ekle\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"apply plugin: \"com.android.application\"\napply plugin: 'newrelic' // <-- bu satırı ekle\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Projelerimizi derleyerek yayına alabiliriz."}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[]}},"_type":"markdown","_id":"content:nuxt-capacitor-newrelic.md","_source":"content","_file":"nuxt-capacitor-newrelic.md","_stem":"nuxt-capacitor-newrelic","_extension":"md"}